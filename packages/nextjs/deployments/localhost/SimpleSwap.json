{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveA",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveB",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb060031566718f2893decc0089304aff59ee714c04ed82a0722ddb1e29e73ab2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1538944",
    "logsBloom": "0x
    "blockHash": "0x5616dde1ec26ba5f3461ad20d36bdb084278bfc6fe9b173d21ad2b6b3adb606a",
    "transactionHash": "0xb060031566718f2893decc0089304aff59ee714c04ed82a0722ddb1e29e73ab2",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1538944",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b4fb066b67a6a0a0b3c48db873adbaa2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveA\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveB\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Based on Uniswap v2 principles. Issues LP tokens to liquidity providers.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"title\":\"SimpleSwap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Adds liquidity to the pool and mints LP tokens to the user.\"},\"constructor\":{\"notice\":\"Deploys the SimpleSwap contract and initializes the LP token.\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Computes the amount of output tokens for a given input amount using constant product formula.\"},\"getPrice(address,address)\":{\"notice\":\"Returns the current spot price of tokenA in terms of tokenB.\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Burns LP tokens and returns the user's share of underlying tokens.\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps a fixed amount of input token for the maximum possible output token.\"}},\"notice\":\"Swap contract for a token pair with LP token minting and burning.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleSwap.sol\":\"SimpleSwap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/SimpleSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ISimpleSwap\\r\\n * @notice Interface defining core functions.\\r\\n */\\r\\ninterface ISimpleSwap {\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function getPrice(address tokenA, address tokenB) external view returns (uint256 price);\\r\\n\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SimpleSwap\\r\\n * @notice Swap contract for a token pair with LP token minting and burning.\\r\\n * @dev Based on Uniswap v2 principles. Issues LP tokens to liquidity providers.\\r\\n */\\r\\ncontract SimpleSwap is ERC20, ISimpleSwap {\\r\\n   \\r\\n    address public tokenA;\\r\\n    address public tokenB;\\r\\n\\r\\n    uint128 public reserveA;\\r\\n    uint128 public reserveB;\\r\\n\\r\\n    /**\\r\\n     * @notice Deploys the SimpleSwap contract and initializes the LP token.\\r\\n     */\\r\\n    constructor() ERC20(\\\"SimpleSwap LP Token\\\", \\\"SSLP\\\") {}\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to enforce correct or initial token pair.\\r\\n     */\\r\\n    modifier validPair(address _tokenA, address _tokenB) {\\r\\n        require(\\r\\n            (tokenA == address(0) && tokenB == address(0)) ||\\r\\n            (tokenA == _tokenA && tokenB == _tokenB),\\r\\n            \\\"Token pair mismatch\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the internal reserve values from the current contract balances.\\r\\n     */\\r\\n    function _updateReserves() internal {\\r\\n        reserveA = uint128(IERC20(tokenA).balanceOf(address(this)));\\r\\n        reserveB = uint128(IERC20(tokenB).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds liquidity to the pool and mints LP tokens to the user.\\r\\n     */\\r\\n    function addLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override validPair(_tokenA, _tokenB) returns (uint amountA, uint amountB, uint liquidity) {\\r\\n        require(block.timestamp <= deadline, \\\"Expired\\\");\\r\\n\\r\\n        if (tokenA == address(0) && tokenB == address(0)) {\\r\\n            require(_tokenA != _tokenB, \\\"Tokens must differ\\\");\\r\\n            tokenA = _tokenA;\\r\\n            tokenB = _tokenB;\\r\\n        }\\r\\n\\r\\n        if (reserveA == 0 && reserveB == 0) {\\r\\n            amountA = amountADesired;\\r\\n            amountB = amountBDesired;\\r\\n        } else {\\r\\n            uint amountBOptimal = (amountADesired * reserveB) / reserveA;\\r\\n            if (amountBOptimal <= amountBDesired) {\\r\\n                require(amountBOptimal >= amountBMin, \\\"Slippage: B too low\\\");\\r\\n                amountA = amountADesired;\\r\\n                amountB = amountBOptimal;\\r\\n            } else {\\r\\n                uint amountAOptimal = (amountBDesired * reserveA) / reserveB;\\r\\n                require(amountAOptimal >= amountAMin, \\\"Slippage: A too low\\\");\\r\\n                amountA = amountAOptimal;\\r\\n                amountB = amountBDesired;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        IERC20(tokenA).transferFrom(msg.sender, address(this), amountA);\\r\\n        IERC20(tokenB).transferFrom(msg.sender, address(this), amountB);\\r\\n\\r\\n        if (totalSupply() == 0) {\\r\\n            liquidity = _sqrt(amountA * amountB);\\r\\n        } else {\\r\\n            liquidity = _min(\\r\\n                (amountA * totalSupply()) / reserveA,\\r\\n                (amountB * totalSupply()) / reserveB\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(liquidity > 0, \\\"Insufficient liquidity minted\\\");\\r\\n\\r\\n        _mint(to, liquidity);\\r\\n        _updateReserves();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burns LP tokens and returns the user's share of underlying tokens.\\r\\n     */\\r\\n    function removeLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override validPair(_tokenA, _tokenB) returns (uint amountA, uint amountB) {\\r\\n        require(block.timestamp <= deadline, \\\"Expired\\\");\\r\\n        require(liquidity > 0 && liquidity <= balanceOf(msg.sender), \\\"Invalid liquidity\\\");\\r\\n\\r\\n        uint _totalSupply = totalSupply();\\r\\n\\r\\n        amountA = (liquidity * reserveA) / _totalSupply;\\r\\n        amountB = (liquidity * reserveB) / _totalSupply;\\r\\n\\r\\n        require(amountA >= amountAMin, \\\"Slippage: A too low\\\");\\r\\n        require(amountB >= amountBMin, \\\"Slippage: B too low\\\");\\r\\n\\r\\n        _burn(msg.sender, liquidity);\\r\\n\\r\\n        IERC20(tokenA).transfer(to, amountA);\\r\\n        IERC20(tokenB).transfer(to, amountB);\\r\\n\\r\\n        _updateReserves();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps a fixed amount of input token for the maximum possible output token.\\r\\n     */\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override {\\r\\n        require(block.timestamp <= deadline, \\\"Expired\\\");\\r\\n        require(amountIn > 0, \\\"Zero input\\\");\\r\\n        require(path.length == 2, \\\"Invalid path\\\");\\r\\n\\r\\n        address input = path[0];\\r\\n        address output = path[1];\\r\\n        require(\\r\\n            (input == tokenA && output == tokenB) || (input == tokenB && output == tokenA),\\r\\n            \\\"Unsupported pair\\\"\\r\\n        );\\r\\n\\r\\n        (uint128 reserveIn, uint128 reserveOut) = input == tokenA\\r\\n            ? (reserveA, reserveB)\\r\\n            : (reserveB, reserveA);\\r\\n\\r\\n        uint amountOut = (amountIn * reserveOut) / (reserveIn + amountIn);\\r\\n        require(amountOut >= amountOutMin, \\\"Slippage\\\");\\r\\n\\r\\n        IERC20(input).transferFrom(msg.sender, address(this), amountIn);\\r\\n        IERC20(output).transfer(to, amountOut);\\r\\n\\r\\n        _updateReserves();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current spot price of tokenA in terms of tokenB.\\r\\n     */\\r\\n    function getPrice(address _tokenA, address _tokenB) external view override validPair(_tokenA, _tokenB) returns (uint price) {\\r\\n        require(reserveA > 0 && reserveB > 0, \\\"No liquidity\\\");\\r\\n\\r\\n        price = (uint(reserveB) * 1e18) / uint(reserveA);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the amount of output tokens for a given input amount using constant product formula.\\r\\n     */\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure override returns (uint amountOut) {\\r\\n        require(amountIn > 0, \\\"Zero input\\\");\\r\\n        require(reserveIn > 0 && reserveOut > 0, \\\"Empty reserves\\\");\\r\\n\\r\\n        amountOut = (amountIn * reserveOut) / (reserveIn + amountIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes square root.\\r\\n     * @param y Input number\\r\\n     * @return z Square root of y\\r\\n     */\\r\\n    function _sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the minimum of two numbers.\\r\\n     * @param x First number\\r\\n     * @param y Second number\\r\\n     * @return Minimum of x and y\\r\\n     */\\r\\n    function _min(uint x, uint y) internal pure returns (uint) {\\r\\n        return x < y ? x : y;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb764f091abb361505dc160c28bf3687bdd8decfe4b7c249aa23f615c72e8a46c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280601381526020017f53696d706c6553776170204c5020546f6b656e0000000000000000000000000081525060405180604001604052806004815260200163053534c560e41b815250816003908162000076919062000133565b50600462000085828262000133565b505050620001ff565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000b957607f821691505b602082108103620000da57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200012e57600081815260208120601f850160051c81016020861015620001095750805b601f850160051c820191505b818110156200012a5782815560010162000115565b5050505b505050565b81516001600160401b038111156200014f576200014f6200008e565b6200016781620001608454620000a4565b84620000e0565b602080601f8311600181146200019f5760008415620001865750858301515b600019600386901b1c1916600185901b1785556200012a565b600085815260208120601f198616915b82811015620001d057888601518255948401946001909101908401620001af565b5085821015620001ef5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6119ea806200020f6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635f64b55b116100a2578063ac41865a11610071578063ac41865a1461026c578063baa2abde1461027f578063dc5fa6c5146102a7578063dd62ed3e146102ba578063e8e33700146102f357600080fd5b80635f64b55b1461021557806370a082311461022857806395d89b4114610251578063a9059cbb1461025957600080fd5b806318160ddd116100e957806318160ddd146101a457806319e36f3b146101ac57806323b872dd146101de578063313ce567146101f157806338ed17391461020057600080fd5b8063054d50d41461011b57806306fdde0314610141578063095ea7b3146101565780630fc63d1014610179575b600080fd5b61012e6101293660046115ba565b610321565b6040519081526020015b60405180910390f35b6101496103d7565b60405161013891906115e6565b61016961016436600461164b565b610469565b6040519015158152602001610138565b60055461018c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b60025461012e565b6007546101c690600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610138565b6101696101ec366004611675565b610483565b60405160128152602001610138565b61021361020e3660046116b1565b6104a7565b005b60065461018c906001600160a01b031681565b61012e610236366004611753565b6001600160a01b031660009081526020819052604090205490565b6101496107f7565b61016961026736600461164b565b610806565b61012e61027a36600461176e565b610814565b61029261028d3660046117a1565b61092c565b60408051928352602083019190915201610138565b6007546101c6906001600160801b031681565b61012e6102c836600461176e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61030661030136600461180b565b610c1d565b60408051938452602084019290925290820152606001610138565b60008084116103645760405162461bcd60e51b815260206004820152600a60248201526916995c9bc81a5b9c1d5d60b21b60448201526064015b60405180910390fd5b6000831180156103745750600082115b6103b15760405162461bcd60e51b815260206004820152600e60248201526d456d70747920726573657276657360901b604482015260640161035b565b6103bb8484611895565b6103c583866118a8565b6103cf91906118bf565b949350505050565b6060600380546103e6906118e1565b80601f0160208091040260200160405190810160405280929190818152602001828054610412906118e1565b801561045f5780601f106104345761010080835404028352916020019161045f565b820191906000526020600020905b81548152906001019060200180831161044257829003601f168201915b5050505050905090565b6000336104778185856110b4565b60019150505b92915050565b6000336104918582856110c6565b61049c858585611144565b506001949350505050565b804211156104c75760405162461bcd60e51b815260040161035b90611915565b600086116105045760405162461bcd60e51b815260206004820152600a60248201526916995c9bc81a5b9c1d5d60b21b604482015260640161035b565b600283146105435760405162461bcd60e51b815260206004820152600c60248201526b092dcecc2d8d2c840e0c2e8d60a31b604482015260640161035b565b60008484600081811061055857610558611936565b905060200201602081019061056d9190611753565b905060008585600181811061058457610584611936565b90506020020160208101906105999190611753565b6005549091506001600160a01b0383811691161480156105c657506006546001600160a01b038281169116145b806105f657506006546001600160a01b0383811691161480156105f657506005546001600160a01b038281169116145b6106355760405162461bcd60e51b815260206004820152601060248201526f2ab739bab83837b93a32b2103830b4b960811b604482015260640161035b565b60055460009081906001600160a01b0385811691161461066a576007546001600160801b03600160801b820481169116610682565b6007546001600160801b0380821691600160801b9004165b9092509050600061069c8b6001600160801b038516611895565b6106af6001600160801b0384168d6118a8565b6106b991906118bf565b9050898110156106f65760405162461bcd60e51b8152602060048201526008602482015267536c69707061676560c01b604482015260640161035b565b6040516323b872dd60e01b8152336004820152306024820152604481018c90526001600160a01b038616906323b872dd906064016020604051808303816000875af1158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d919061194c565b5060405163a9059cbb60e01b81526001600160a01b0388811660048301526024820183905285169063a9059cbb906044016020604051808303816000875af11580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e1919061194c565b506107ea6111a3565b5050505050505050505050565b6060600480546103e6906118e1565b600033610477818585611144565b600554600090839083906001600160a01b031615801561083d57506006546001600160a01b0316155b8061086d57506005546001600160a01b03838116911614801561086d57506006546001600160a01b038281169116145b6108895760405162461bcd60e51b815260040161035b9061196e565b6007546001600160801b0316158015906108b45750600754600160801b90046001600160801b031615155b6108ef5760405162461bcd60e51b815260206004820152600c60248201526b4e6f206c697175696469747960a01b604482015260640161035b565b6007546001600160801b038082169161091991600160801b90910416670de0b6b3a76400006118a8565b61092391906118bf565b95945050505050565b6005546000908190899089906001600160a01b031615801561095757506006546001600160a01b0316155b8061098757506005546001600160a01b03838116911614801561098757506006546001600160a01b038281169116145b6109a35760405162461bcd60e51b815260040161035b9061196e565b844211156109c35760405162461bcd60e51b815260040161035b90611915565b6000891180156109e25750336000908152602081905260409020548911155b610a225760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206c697175696469747960781b604482015260640161035b565b6000610a2d60025490565b6007549091508190610a48906001600160801b03168c6118a8565b610a5291906118bf565b6007549095508190610a7490600160801b90046001600160801b03168c6118a8565b610a7e91906118bf565b935088851015610ac65760405162461bcd60e51b8152602060048201526013602482015272536c6970706167653a204120746f6f206c6f7760681b604482015260640161035b565b87841015610b0c5760405162461bcd60e51b8152602060048201526013602482015272536c6970706167653a204220746f6f206c6f7760681b604482015260640161035b565b610b16338b6112c3565b60055460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af1158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d919061194c565b5060065460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af1158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c05919061194c565b50610c0e6111a3565b50505097509795505050505050565b600554600090819081908b908b906001600160a01b0316158015610c4a57506006546001600160a01b0316155b80610c7a57506005546001600160a01b038381169116148015610c7a57506006546001600160a01b038281169116145b610c965760405162461bcd60e51b815260040161035b9061196e565b85421115610cb65760405162461bcd60e51b815260040161035b90611915565b6005546001600160a01b0316158015610cd857506006546001600160a01b0316155b15610d82578b6001600160a01b03168d6001600160a01b031603610d335760405162461bcd60e51b81526020600482015260126024820152712a37b5b2b7399036bab9ba103234b33332b960711b604482015260640161035b565b8c600560006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600660006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6007546001600160801b0316158015610dab5750600754600160801b90046001600160801b0316155b15610dbb578a9450899350610ec1565b6007546000906001600160801b0380821691610de091600160801b909104168e6118a8565b610dea91906118bf565b90508a8111610e445788811015610e395760405162461bcd60e51b8152602060048201526013602482015272536c6970706167653a204220746f6f206c6f7760681b604482015260640161035b565b8b9550809450610ebf565b6007546000906001600160801b03600160801b8204811691610e6791168e6118a8565b610e7191906118bf565b90508a811015610eb95760405162461bcd60e51b8152602060048201526013602482015272536c6970706167653a204120746f6f206c6f7760681b604482015260640161035b565b95508a94505b505b6005546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c919061194c565b506006546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb8919061194c565b50600254600003610fdc57610fd5610fd085876118a8565b6112fd565b9250611042565b60075461103f906001600160801b0316610ff560025490565b610fff90886118a8565b61100991906118bf565b6007546001600160801b03600160801b9091041661102660025490565b61103090886118a8565b61103a91906118bf565b61136d565b92505b600083116110925760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206d696e746564000000604482015260640161035b565b61109c8784611385565b6110a46111a3565b5050985098509895505050505050565b6110c183838360016113bb565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461113e578181101561112f57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161035b565b61113e848484840360006113bb565b50505050565b6001600160a01b03831661116e57604051634b637e8f60e11b81526000600482015260240161035b565b6001600160a01b0382166111985760405163ec442f0560e01b81526000600482015260240161035b565b6110c1838383611490565b6005546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120f919061199b565b600780546fffffffffffffffffffffffffffffffff19166001600160801b03929092169190911790556006546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a4919061199b565b600780546001600160801b03928316600160801b029216919091179055565b6001600160a01b0382166112ed57604051634b637e8f60e11b81526000600482015260240161035b565b6112f982600083611490565b5050565b6000600382111561135e57508060006113176002836118bf565b611322906001611895565b90505b818110156113585790508060028161133d81866118bf565b6113479190611895565b61135191906118bf565b9050611325565b50919050565b8115611368575060015b919050565b600081831061137c578161137e565b825b9392505050565b6001600160a01b0382166113af5760405163ec442f0560e01b81526000600482015260240161035b565b6112f960008383611490565b6001600160a01b0384166113e55760405163e602df0560e01b81526000600482015260240161035b565b6001600160a01b03831661140f57604051634a1406b160e11b81526000600482015260240161035b565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561113e57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161148291815260200190565b60405180910390a350505050565b6001600160a01b0383166114bb5780600260008282546114b09190611895565b9091555061152d9050565b6001600160a01b0383166000908152602081905260409020548181101561150e5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161035b565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661154957600280548290039055611568565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115ad91815260200190565b60405180910390a3505050565b6000806000606084860312156115cf57600080fd5b505081359360208301359350604090920135919050565b600060208083528351808285015260005b81811015611613578581018301518582016040015282016115f7565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461136857600080fd5b6000806040838503121561165e57600080fd5b61166783611634565b946020939093013593505050565b60008060006060848603121561168a57600080fd5b61169384611634565b92506116a160208501611634565b9150604084013590509250925092565b60008060008060008060a087890312156116ca57600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156116f057600080fd5b818901915089601f83011261170457600080fd5b81358181111561171357600080fd5b8a60208260051b850101111561172857600080fd5b60208301965080955050505061174060608801611634565b9150608087013590509295509295509295565b60006020828403121561176557600080fd5b61137e82611634565b6000806040838503121561178157600080fd5b61178a83611634565b915061179860208401611634565b90509250929050565b600080600080600080600060e0888a0312156117bc57600080fd5b6117c588611634565b96506117d360208901611634565b95506040880135945060608801359350608088013592506117f660a08901611634565b915060c0880135905092959891949750929550565b600080600080600080600080610100898b03121561182857600080fd5b61183189611634565b975061183f60208a01611634565b965060408901359550606089013594506080890135935060a0890135925061186960c08a01611634565b915060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8082018082111561047d5761047d61187f565b808202811582820484141761047d5761047d61187f565b6000826118dc57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806118f557607f821691505b60208210810361135857634e487b7160e01b600052602260045260246000fd5b602080825260079082015266115e1c1a5c995960ca1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561195e57600080fd5b8151801515811461137e57600080fd5b6020808252601390820152720a8ded6cadc40e0c2d2e440dad2e6dac2e8c6d606b1b604082015260600190565b6000602082840312156119ad57600080fd5b505191905056fea26469706673582212204d8b35774b1b824c16075afc5a6ea653597e0d8ef2bfcfb19a18260658222c4464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80635f64b55b116100a2578063ac41865a11610071578063ac41865a1461026c578063baa2abde1461027f578063dc5fa6c5146102a7578063dd62ed3e146102ba578063e8e33700146102f357600080fd5b80635f64b55b1461021557806370a082311461022857806395d89b4114610251578063a9059cbb1461025957600080fd5b806318160ddd116100e957806318160ddd146101a457806319e36f3b146101ac57806323b872dd146101de578063313ce567146101f157806338ed17391461020057600080fd5b8063054d50d41461011b57806306fdde0314610141578063095ea7b3146101565780630fc63d1014610179575b600080fd5b61012e6101293660046115ba565b610321565b6040519081526020015b60405180910390f35b6101496103d7565b60405161013891906115e6565b61016961016436600461164b565b610469565b6040519015158152602001610138565b60055461018c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b60025461012e565b6007546101c690600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610138565b6101696101ec366004611675565b610483565b60405160128152602001610138565b61021361020e3660046116b1565b6104a7565b005b60065461018c906001600160a01b031681565b61012e610236366004611753565b6001600160a01b031660009081526020819052604090205490565b6101496107f7565b61016961026736600461164b565b610806565b61012e61027a36600461176e565b610814565b61029261028d3660046117a1565b61092c565b60408051928352602083019190915201610138565b6007546101c6906001600160801b031681565b61012e6102c836600461176e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61030661030136600461180b565b610c1d565b60408051938452602084019290925290820152606001610138565b60008084116103645760405162461bcd60e51b815260206004820152600a60248201526916995c9bc81a5b9c1d5d60b21b60448201526064015b60405180910390fd5b6000831180156103745750600082115b6103b15760405162461bcd60e51b815260206004820152600e60248201526d456d70747920726573657276657360901b604482015260640161035b565b6103bb8484611895565b6103c583866118a8565b6103cf91906118bf565b949350505050565b6060600380546103e6906118e1565b80601f0160208091040260200160405190810160405280929190818152602001828054610412906118e1565b801561045f5780601f106104345761010080835404028352916020019161045f565b820191906000526020600020905b81548152906001019060200180831161044257829003601f168201915b5050505050905090565b6000336104778185856110b4565b60019150505b92915050565b6000336104918582856110c6565b61049c858585611144565b506001949350505050565b804211156104c75760405162461bcd60e51b815260040161035b90611915565b600086116105045760405162461bcd60e51b815260206004820152600a60248201526916995c9bc81a5b9c1d5d60b21b604482015260640161035b565b600283146105435760405162461bcd60e51b815260206004820152600c60248201526b092dcecc2d8d2c840e0c2e8d60a31b604482015260640161035b565b60008484600081811061055857610558611936565b905060200201602081019061056d9190611753565b905060008585600181811061058457610584611936565b90506020020160208101906105999190611753565b6005549091506001600160a01b0383811691161480156105c657506006546001600160a01b038281169116145b806105f657506006546001600160a01b0383811691161480156105f657506005546001600160a01b038281169116145b6106355760405162461bcd60e51b815260206004820152601060248201526f2ab739bab83837b93a32b2103830b4b960811b604482015260640161035b565b60055460009081906001600160a01b0385811691161461066a576007546001600160801b03600160801b820481169116610682565b6007546001600160801b0380821691600160801b9004165b9092509050600061069c8b6001600160801b038516611895565b6106af6001600160801b0384168d6118a8565b6106b991906118bf565b9050898110156106f65760405162461bcd60e51b8152602060048201526008602482015267536c69707061676560c01b604482015260640161035b565b6040516323b872dd60e01b8152336004820152306024820152604481018c90526001600160a01b038616906323b872dd906064016020604051808303816000875af1158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d919061194c565b5060405163a9059cbb60e01b81526001600160a01b0388811660048301526024820183905285169063a9059cbb906044016020604051808303816000875af11580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e1919061194c565b506107ea6111a3565b5050505050505050505050565b6060600480546103e6906118e1565b600033610477818585611144565b600554600090839083906001600160a01b031615801561083d57506006546001600160a01b0316155b8061086d57506005546001600160a01b03838116911614801561086d57506006546001600160a01b038281169116145b6108895760405162461bcd60e51b815260040161035b9061196e565b6007546001600160801b0316158015906108b45750600754600160801b90046001600160801b031615155b6108ef5760405162461bcd60e51b815260206004820152600c60248201526b4e6f206c697175696469747960a01b604482015260640161035b565b6007546001600160801b038082169161091991600160801b90910416670de0b6b3a76400006118a8565b61092391906118bf565b95945050505050565b6005546000908190899089906001600160a01b031615801561095757506006546001600160a01b0316155b8061098757506005546001600160a01b03838116911614801561098757506006546001600160a01b038281169116145b6109a35760405162461bcd60e51b815260040161035b9061196e565b844211156109c35760405162461bcd60e51b815260040161035b90611915565b6000891180156109e25750336000908152602081905260409020548911155b610a225760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206c697175696469747960781b604482015260640161035b565b6000610a2d60025490565b6007549091508190610a48906001600160801b03168c6118a8565b610a5291906118bf565b6007549095508190610a7490600160801b90046001600160801b03168c6118a8565b610a7e91906118bf565b935088851015610ac65760405162461bcd60e51b8152602060048201526013602482015272536c6970706167653a204120746f6f206c6f7760681b604482015260640161035b565b87841015610b0c5760405162461bcd60e51b8152602060048201526013602482015272536c6970706167653a204220746f6f206c6f7760681b604482015260640161035b565b610b16338b6112c3565b60055460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af1158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d919061194c565b5060065460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af1158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c05919061194c565b50610c0e6111a3565b50505097509795505050505050565b600554600090819081908b908b906001600160a01b0316158015610c4a57506006546001600160a01b0316155b80610c7a57506005546001600160a01b038381169116148015610c7a57506006546001600160a01b038281169116145b610c965760405162461bcd60e51b815260040161035b9061196e565b85421115610cb65760405162461bcd60e51b815260040161035b90611915565b6005546001600160a01b0316158015610cd857506006546001600160a01b0316155b15610d82578b6001600160a01b03168d6001600160a01b031603610d335760405162461bcd60e51b81526020600482015260126024820152712a37b5b2b7399036bab9ba103234b33332b960711b604482015260640161035b565b8c600560006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600660006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6007546001600160801b0316158015610dab5750600754600160801b90046001600160801b0316155b15610dbb578a9450899350610ec1565b6007546000906001600160801b0380821691610de091600160801b909104168e6118a8565b610dea91906118bf565b90508a8111610e445788811015610e395760405162461bcd60e51b8152602060048201526013602482015272536c6970706167653a204220746f6f206c6f7760681b604482015260640161035b565b8b9550809450610ebf565b6007546000906001600160801b03600160801b8204811691610e6791168e6118a8565b610e7191906118bf565b90508a811015610eb95760405162461bcd60e51b8152602060048201526013602482015272536c6970706167653a204120746f6f206c6f7760681b604482015260640161035b565b95508a94505b505b6005546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c919061194c565b506006546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb8919061194c565b50600254600003610fdc57610fd5610fd085876118a8565b6112fd565b9250611042565b60075461103f906001600160801b0316610ff560025490565b610fff90886118a8565b61100991906118bf565b6007546001600160801b03600160801b9091041661102660025490565b61103090886118a8565b61103a91906118bf565b61136d565b92505b600083116110925760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206d696e746564000000604482015260640161035b565b61109c8784611385565b6110a46111a3565b5050985098509895505050505050565b6110c183838360016113bb565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461113e578181101561112f57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161035b565b61113e848484840360006113bb565b50505050565b6001600160a01b03831661116e57604051634b637e8f60e11b81526000600482015260240161035b565b6001600160a01b0382166111985760405163ec442f0560e01b81526000600482015260240161035b565b6110c1838383611490565b6005546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120f919061199b565b600780546fffffffffffffffffffffffffffffffff19166001600160801b03929092169190911790556006546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a4919061199b565b600780546001600160801b03928316600160801b029216919091179055565b6001600160a01b0382166112ed57604051634b637e8f60e11b81526000600482015260240161035b565b6112f982600083611490565b5050565b6000600382111561135e57508060006113176002836118bf565b611322906001611895565b90505b818110156113585790508060028161133d81866118bf565b6113479190611895565b61135191906118bf565b9050611325565b50919050565b8115611368575060015b919050565b600081831061137c578161137e565b825b9392505050565b6001600160a01b0382166113af5760405163ec442f0560e01b81526000600482015260240161035b565b6112f960008383611490565b6001600160a01b0384166113e55760405163e602df0560e01b81526000600482015260240161035b565b6001600160a01b03831661140f57604051634a1406b160e11b81526000600482015260240161035b565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561113e57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161148291815260200190565b60405180910390a350505050565b6001600160a01b0383166114bb5780600260008282546114b09190611895565b9091555061152d9050565b6001600160a01b0383166000908152602081905260409020548181101561150e5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161035b565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661154957600280548290039055611568565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115ad91815260200190565b60405180910390a3505050565b6000806000606084860312156115cf57600080fd5b505081359360208301359350604090920135919050565b600060208083528351808285015260005b81811015611613578581018301518582016040015282016115f7565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461136857600080fd5b6000806040838503121561165e57600080fd5b61166783611634565b946020939093013593505050565b60008060006060848603121561168a57600080fd5b61169384611634565b92506116a160208501611634565b9150604084013590509250925092565b60008060008060008060a087890312156116ca57600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156116f057600080fd5b818901915089601f83011261170457600080fd5b81358181111561171357600080fd5b8a60208260051b850101111561172857600080fd5b60208301965080955050505061174060608801611634565b9150608087013590509295509295509295565b60006020828403121561176557600080fd5b61137e82611634565b6000806040838503121561178157600080fd5b61178a83611634565b915061179860208401611634565b90509250929050565b600080600080600080600060e0888a0312156117bc57600080fd5b6117c588611634565b96506117d360208901611634565b95506040880135945060608801359350608088013592506117f660a08901611634565b915060c0880135905092959891949750929550565b600080600080600080600080610100898b03121561182857600080fd5b61183189611634565b975061183f60208a01611634565b965060408901359550606089013594506080890135935060a0890135925061186960c08a01611634565b915060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8082018082111561047d5761047d61187f565b808202811582820484141761047d5761047d61187f565b6000826118dc57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806118f557607f821691505b60208210810361135857634e487b7160e01b600052602260045260246000fd5b602080825260079082015266115e1c1a5c995960ca1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561195e57600080fd5b8151801515811461137e57600080fd5b6020808252601390820152720a8ded6cadc40e0c2d2e440dad2e6dac2e8c6d606b1b604082015260600190565b6000602082840312156119ad57600080fd5b505191905056fea26469706673582212204d8b35774b1b824c16075afc5a6ea653597e0d8ef2bfcfb19a18260658222c4464736f6c63430008140033",
  "devdoc": {
    "details": "Based on Uniswap v2 principles. Issues LP tokens to liquidity providers.",
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      }
    },
    "title": "SimpleSwap",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Adds liquidity to the pool and mints LP tokens to the user."
      },
      "constructor": {
        "notice": "Deploys the SimpleSwap contract and initializes the LP token."
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "notice": "Computes the amount of output tokens for a given input amount using constant product formula."
      },
      "getPrice(address,address)": {
        "notice": "Returns the current spot price of tokenA in terms of tokenB."
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Burns LP tokens and returns the user's share of underlying tokens."
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps a fixed amount of input token for the maximum possible output token."
      }
    },
    "notice": "Swap contract for a token pair with LP token minting and burning.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 159,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 165,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 167,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 911,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "tokenA",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 913,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "tokenB",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 915,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "reserveA",
        "offset": 0,
        "slot": "7",
        "type": "t_uint128"
      },
      {
        "astId": 917,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "reserveB",
        "offset": 16,
        "slot": "7",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}